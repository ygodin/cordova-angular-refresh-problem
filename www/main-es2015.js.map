{"version":3,"sources":["./src/$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'cordova-angular';\n  private state = new BehaviorSubject({loading: false, name: null});\n  public context$: Observable<{loading: boolean; name: string}>;\n  public visible = true;\n\n  constructor(private readonly httpClient: HttpClient, private cdRef: ChangeDetectorRef) {\n    this.context$ = this.state.asObservable();\n  }\n\n  // Toggling will force a refresh\n  toggle() {\n    this.visible = !this.visible;\n  }\n\n  loadData() {\n    this.state.next({loading: true, name: null});\n    this.httpClient.get<any>('http://www.mocky.io/v2/5ecc09f73000008894dddacd').subscribe(data => {\n      this.state.next({loading: false, name: 'REFRESH DONE'});\n    })\n  }\n}\n","<div style=\"padding-top: 50px;\">\n  <div *ngIf=\"visible\">\n    <div *ngIf=\"(context$ | async)?.loading\">LOADING</div>\n    <div *ngIf=\"(context$ | async)?.name as name\">{{name}}</div>\n  </div>\n  <button (click)=\"loadData()\">HTTPCall</button>\n  <button (click)=\"toggle()\">toggle</button>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nconst bootstrap = () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n};\n\n// tslint:disable-next-line: no-string-literal\nif (typeof window['cordova'] !== 'undefined') {\n  document.addEventListener('deviceready', () => {\n    console.log('deviceready');\n    bootstrap();\n  }, false);\n} else {\n  console.log('devicereadyNOT');\n  bootstrap();\n}"],"sourceRoot":"webpack:///"}